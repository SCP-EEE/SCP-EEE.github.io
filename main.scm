(define (fib x) (letrec ((fib-iter (lambda (n f1 f2) (if (< n 1) f1 (fib-iter (- n 1) f2 (+ f1  f2))))))(fib-iter x 0 1)))
(console-log "ok")
(define helloworld "こんにちは世界\nこの手紙はあなたに見えているでしょうか？")
(define (type-text text) (let ((list-text (string->list text)) (display-text (lambda (x) (begin (sleep sec) (display x))))) (map display-text list-text)))
(define sec 0.2)
(type-text helloworld)
(newline)
(define user-msg (symbol->string (read (current-input-port))))
(display user-msg)
(newline)
(cond ((string=? user-msg "はい") (type-text "そうですか"))
      ((string=? user-msg "いいえ") (type-text "...")))
(newline)
(type-text "あなたにお願いしたいことがあります。")
(newline)
(type-text "聞いてくれますか？")
(newline)
(define user-msg (symbol->string (read (current-input-port))))
(display user-msg)
(newline)
(cond ((string=? user-msg "はい") (type-text "よかった"))
      ((string=? user-msg "いいえ") (type-text "...")))
(newline)
(type-text "17番目のフィボナッチ数列の数はいくつですか？")
(newline)
(define user-msg (symbol->string (read (current-input-port))))
(display user-msg)
(newline)
(cond ((string=? user-msg "はい?") (type-text "よかった"))
      ((string=? user-msg "わかんねえよ") (type-text "..."))
      ((string=? user-msg (number->string (fib 17)))(type-text "ようこそ、私のサイトへ")))
